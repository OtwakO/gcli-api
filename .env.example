# -----------------------------------------------------------------------------
# Gemini API Rotating Proxy - Environment Variables
#
# Copy this file to .env and fill in the values.
# -----------------------------------------------------------------------------

# --- Server Configuration ---
# The public domain name where this proxy will be hosted. This is critical for
# the one-time credential generation process, as it's used for the OAuth redirect URI.
# For local development, this is typically http://localhost:{PORT}.
DOMAIN_NAME="http://localhost:7860"

# The port the server will run on.
PORT=7860

# A list of origins that are allowed to make cross-origin requests. For production,
# it is highly recommended to restrict this to your specific frontend domain(s).
# e.g., CORS_ALLOWED_ORIGINS='["https://my-app.com", "https://my-other-app.com"]'
CORS_ALLOWED_ORIGINS='["*"]'

# --- Security ---
# A simple password to protect access to your proxy. This will be used as a
# Bearer token in the Authorization header (e.g., "Authorization: Bearer your-password").
# It is strongly recommended to change this from the default value.
GEMINI_AUTH_PASSWORD="123456"

# An API key from Google Cloud is required for the embedding endpoints to work.
# The generative/chat endpoints will continue to use the rotating OAuth credentials.
# To create a key:
# 1. Go to the Google Cloud Console -> APIs & Services -> Credentials.
# 2. Click "+ CREATE CREDENTIALS" and select "API key".
# 3. It's recommended to restrict the key to the "Generative Language API".
EMBEDDING_GEMINI_API_KEY=""

# --- Google OAuth Client (Optional) ---
# The application is pre-configured with a default public OAuth client for convenience.
# You can override these values with your own client ID and secret if needed.
# If you use your own, ensure it is a "Web application" type and that you have
# added the correct redirect URI (e.g., http://localhost:7860/oauth2callback)
# to its configuration in the Google Cloud Console.
#
# CLIENT_ID="681255809395-oo8ft2oprdrnp9e3aqf6av3hmdib135j.apps.googleusercontent.com"
# CLIENT_SECRET="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"

# --- Credential Loading ---
# The proxy can load multiple credentials for rotation. Choose ONE of the following methods.

# Method 1: File-based (Default and Recommended for most setups)
# The credential generator creates `oauth_creds_*.json` files in the `src/` directory.
# The proxy automatically finds and loads all of them from this path.
# PERSISTENT_STORAGE_PATH="src/"

# Method 2: Environment Variable (for Stateless/Containerized Deployments)
# For environments like Docker or serverless, you can provide a JSON array of credentials directly. 
# This avoids the need for persistent file storage. If this variable is set,
# it will be used INSTEAD of the file-based method.
#
# Example:
# CREDENTIALS_JSON_LIST='
# [
#   {
#     "client_id": "your-client-id",
#     "client_secret": "your-client-secret",
#     "refresh_token": "1//...",
#     "project_id": "gcp-project-one",
#     "user_email": "user1@example.com"
#   },
#   {
#     "client_id": "your-client-id",
#     "client_secret": "your-client-secret",
#     "refresh_token": "1//...",
#     "project_id": "gcp-project-two",
#     "user_email": "user2@example.com"
#   }
# ]
# '

# --- Debugging ---
# Set to `true` or `1` to enable verbose debug logging.
# This will log detailed information about incoming requests, upstream requests to Google, credential rotation, and response data.
DEBUG=false

# Set to `true` or `1` to redact sensitive text (like user prompts and image data)
# from the debug logs. Only has an effect if DEBUG=true.
DEBUG_REDACT_LOGS=true
